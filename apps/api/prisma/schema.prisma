generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Appeal {
  id                           Int                   @id @default(autoincrement())
  reference                    String
  address                      Address               @relation(fields: [addressId], references: [id])
  addressId                    Int
  status                       String                @default("received_appeal")
  appellantName                String
  localPlanningDepartment      String
  planningApplicationReference String
  createdAt                    DateTime              @default(now())
  updatedAt                    DateTime              @default(now())
  statusUpdatedAt              DateTime              @default(now())
  startedAt                    DateTime?
  validationDecision           ValidationDecision[]
  reviewQuestionnaire          ReviewQuestionnaire[]
  lpaQuestionnaire             LPAQuestionnaire?
  siteVisit                    SiteVisit?
  user                         User?                @relation(fields: [userId], references: [id])
  userId                       Int?
  appealDetailsFromAppellant AppealDetailsFromAppellant?
}

model AppealDetailsFromAppellant {
  id Int @id @default(autoincrement())
  appeal Appeal @relation(fields: [appealId], references: [id])
  appealId Int
  siteVisibleFromPublicLand Boolean?
}

model Address {
  id           Int      @id @default(autoincrement())
  addressLine1 String?
  addressLine2 String?
  town         String?
  county       String?
  postcode     String?
  Appeal       Appeal[]
}

model ValidationDecision {
  id                         Int      @id @default(autoincrement())
  appeal                     Appeal   @relation(fields: [appealId], references: [id])
  appealId                   Int
  createdAt                  DateTime @default(now())
  decision                   String //can be 'valid', 'invalid' or 'incomplete' ...  that can be managed with enum
  namesDoNotMatch            Boolean  @default(false)
  sensitiveInfo              Boolean  @default(false)
  missingApplicationForm     Boolean  @default(false)
  missingDecisionNotice      Boolean  @default(false)
  missingGroundsForAppeal    Boolean  @default(false)
  missingSupportingDocuments Boolean  @default(false)
  inflammatoryComments       Boolean  @default(false)
  openedInError              Boolean  @default(false)
  wrongAppealTypeUsed        Boolean  @default(false)
  outOfTime                  Boolean  @default(false)
  noRightOfAppeal            Boolean  @default(false)
  notAppealable              Boolean  @default(false)
  lPADeemedInvalid           Boolean  @default(false)
  otherReasons               String?
  descriptionOfDevelopment   String?
}

model LPAQuestionnaire {
  id                                                 Int       @id @default(autoincrement())
  appeal                                             Appeal    @relation(fields: [appealId], references: [id])
  appealId                                           Int       @unique
  affectsListedBuilding                              Boolean?
  listedBuildingDescription                          String?
  extraConditions                                    Boolean?
  inGreenBelt                                        Boolean?
  inOrNearConservationArea                           Boolean?
  siteVisibleFromPublicLand                          Boolean?
  sideVisibleFromPublicLandDescription               String?
  doesInspectorNeedToEnterSite                       Boolean?
  doesInspectorNeedToEnterSideDescription            String?
  doesInspectorNeedToAccessNeighboursLand            Boolean?
  doesInspectorNeedToAccessNeighboursLandDescription String?
  healthAndSafetyIssues                              Boolean?
  healthAndSafetyIsueesDescription                   String?
  appealsInImmediateAreaBeingConsidered              String?
  sentAt                                             DateTime  @default(now())
  receivedAt                                         DateTime?
}

model ReviewQuestionnaire {
  id                                                                          Int      @id @default(autoincrement())
  appeal                                                                      Appeal   @relation(fields: [appealId], references: [id])
  appealId                                                                    Int
  createdAt                                                                   DateTime @default(now())
  complete                                                                    Boolean  @default(false)
  applicationPlanningOfficersReportMissingOrIncorrect                         Boolean  @default(false)
  applicationPlansToReachDecisionMissingOrIncorrect                           Boolean  @default(false)
  applicationPlansToReachDecisionMissingOrIncorrectDescription                String?
  policiesStatutoryDevelopmentPlanPoliciesMissingOrIncorrect                  Boolean  @default(false)
  policiesStatutoryDevelopmentPlanPoliciesMissingOrIncorrectDescription       String?
  policiesOtherRelevantPoliciesMissingOrIncorrect                             Boolean  @default(false)
  policiesOtherRelevantPoliciesMissingOrIncorrectDescription                  String?
  policiesSupplementaryPlanningDocumentsMissingOrIncorrect                    Boolean  @default(false)
  policiesSupplementaryPlanningDocumentsMissingOrIncorrectDescription         String?
  siteConservationAreaMapAndGuidanceMissingOrIncorrect                        Boolean  @default(false)
  siteConservationAreaMapAndGuidanceMissingOrIncorrectDescription             String?
  siteListedBuildingDescriptionMissingOrIncorrect                             Boolean  @default(false)
  siteListedBuildingDescriptionMissingOrIncorrectDescription                  String?
  thirdPartyApplicationNotificationMissingOrIncorrect                         Boolean  @default(false)
  thirdPartyApplicationNotificationMissingOrIncorrectListOfAddresses          Boolean  @default(false)
  thirdPartyApplicationNotificationMissingOrIncorrectCopyOfLetterOrSiteNotice Boolean  @default(false)
  thirdPartyApplicationPublicityMissingOrIncorrect                            Boolean  @default(false)
  thirdPartyRepresentationsMissingOrIncorrect                                 Boolean  @default(false)
  thirdPartyRepresentationsMissingOrIncorrectDescription                      String?
  thirdPartyAppealNotificationMissingOrIncorrect                              Boolean  @default(false)
  thirdPartyAppealNotificationMissingOrIncorrectListOfAddresses               Boolean  @default(false)
  thirdPartyAppealNotificationMissingOrIncorrectCopyOfLetterOrSiteNotice      Boolean  @default(false)
}

model SiteVisit {
  id        Int      @id @default(autoincrement())
  appeal    Appeal   @relation(fields: [appealId], references: [id])
  appealId  Int      @unique
  visitDate DateTime
  visitSlot String
  visitType String?
}

model User {
  id     Int      @id @default(autoincrement())
  appeal Appeal[]
}
