{% extends "app/layouts/app-two-column.layout.njk" %}

{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/radios/macro.njk" import govukRadios %}
{% from "govuk/components/summary-list/macro.njk" import govukSummaryList %}
{% from "./components/appeal-summary.component.njk" import appealSummary %}
{% from "app/components/document-list.component.njk" import documentList %}

{% set isAppealIncomplete = appeal.AppealStatus === 'incomplete' %}

{% set pageTitle = 'Review appeal submission' %}
{% if canEditReviewOutcome %}
	{% set pageTitle = 'Change incomplete appeal outcome' %}
{% elseif isAppealIncomplete %}
	{% set pageTitle = 'Update incomplete appeal' %}
{% endif %}

{% block pageContent %}
	<h2 class="govuk-visually-hidden">
    Appeal details
  </h2>

	{{ appealSummary({ appeal: appeal }) }}

	<h2 class="govuk-heading-l govuk-!-margin-top-9">
		Planning application documents
	</h2>

	{{
		documentSummaryList([
		 { label: 'Planning application form', documentType: 'planning application form' },
		 { label: 'Decision letter', documentType: 'decision letter' }
		])
	}}

	<h2 class="govuk-heading-l govuk-!-margin-top-9">
		Appeal documents
	</h2>

	{{
		documentSummaryList([
		 { label: 'Appeal statement', documentType: 'appeal statement' },
		 { label: 'Supporting documents', documentType: 'supporting document' }
		])
	}}

	{% if not isAppealIncomplete %}

		{# New appeal #}

		<form action="" method="post" novalidate>
			{{ govukRadios({
				idPrefix: "reviewOutcome",
				name: "reviewOutcome",
				errorMessage: errors.reviewOutcome and { text: errors.reviewOutcome.msg },
				fieldset: {
					legend: {
						text: "Outcome of review",
						isPageHeading: false,
						classes: "govuk-fieldset__legend--l govuk-!-margin-top-6"
					}
				},
				items: [
					{ value: 'valid', text: "Valid", checked: reviewOutcome === 'valid' },
					{ value: 'invalid', text: "Invalid", checked: reviewOutcome === 'invalid' },
					{ divider: "or" },
					{ value: 'incomplete', text: "Something is missing or wrong", checked: reviewOutcome === 'incomplete' }
				]
			}) }}

			{{ govukButton({ text: text | default('Continue') }) }}
		</form>

	{% else %}

		{# Incomplete appeal #}

		{% if canEditReviewOutcome %}
			<form action="" method="post" novalidate>
				{{ govukRadios({
					idPrefix: "reviewOutcome",
					name: "reviewOutcome",
					errorMessage: errors.reviewOutcome and { text: errors.reviewOutcome.msg },
					fieldset: {
						legend: {
							text: "Outcome of review",
							isPageHeading: false,
							classes: "govuk-fieldset__legend--l govuk-!-margin-top-6"
						}
					},
					items: [
						{ value: 'valid', text: "Valid", checked: reviewOutcome === 'valid' },
						{ value: 'invalid', text: "Invalid", checked: reviewOutcome === 'invalid' }
					]
				}) }}

				<div class="govuk-button-group">
  				{{ govukButton({ text: "Continue" }) }}
					<a class="govuk-link" href="/validation/review-appeal/{{ appeal.AppealId }}">Cancel</a>
				</div>
			</form>
		{% else %}
			{{ govukButton({
				href: '/validation/review-appeal/' + appeal.AppealId + '?edit=true',
				text: 'Change outcome',
				classes: 'govuk-button--secondary'
			}) }}
		{% endif %}

	{% endif %}
{% endblock %}

{% macro documentSummaryList(rows) %}
	{% set summaryListRows = [] %}

	{% for row in rows %}
		{% set actionItems = [] %}
		{% set documents = appeal.Documents | filter({ Type: row.documentType }) %}

		{% if isAppealIncomplete %}
			{% set actionItems = [
				{
					text: 'Change',
					href: '/validation/review-appeal/' + appeal.AppealId + '/documents/' + (row.documentType | lower | kebabCase),
					visuallyHiddenText: row.label | lower
				}
			] %}
		{% endif %}
		{% set summaryListRow = {
				key: { text: row.label },
				value: {
					html: documentList(documents)
				},
				actions: { items: actionItems }
			} %}
		{% set summaryListRows = (summaryListRows.push(summaryListRow), summaryListRows) %}
	{% endfor %}

	{{ govukSummaryList({ rows: summaryListRows }) }}
{% endmacro %}
