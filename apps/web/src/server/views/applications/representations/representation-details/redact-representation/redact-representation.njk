{% extends "applications/layouts/applications.layout.njk" %}

{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/textarea/macro.njk" import govukTextarea %}
{% from "applications/components/status-tag.component.njk" import statusTag %}

{% block pageHeading %}
	<h1 class="govuk-heading-l govuk-!-margin-bottom-2">{{ redactedBy }}</h1>

	{{ statusTag(statusText) }}

	<p class="govuk-body govuk-!-margin-0 govuk-!-margin-top-5">
		<strong>Project name:</strong> {{ projectName }}
	</p>
{% endblock %}

{% block pageContent %}
	<form method="post">
		<div class="govuk-grid-row govuk-!-margin-top-8">
			<div class="govuk-grid-column-one-half" id="original-representation-section">
        <span class="govuk-heading-s display--flex">
          <span class="flex-grow--1">
            Original representation
          </span>

          <a class="govuk-link govuk-body govuk-!-margin-0" href="#" id="hide-original-representation-button">
            Hide
          </a>
        </span>

				<p class="govuk-body white-space--pre-line word-break--break-word">{{ originalRepresentation }}</p>
			</div>

			<div class="govuk-grid-column-one-half" id="redact-representation-section">
				<a class="govuk-link govuk-body govuk-!-display-none" href="#" id="show-original-representation-button">
					Show original representation
				</a>

				{{ govukTextarea({
					id: "redact-representation-text",
					label: {
						classes: "govuk-label--s",
						text: "Redact representation"
					},
					name: "redactedRepresentation",
					value: redactedRepresentation
				}) }}

				{{ govukButton({
					attributes: { id: "submit-redact-representation" },
					classes: "govuk-button--secondary",
					text: "Redact",
					type: "submit"
				}) }}
			</div>
		</div>

		<div class="govuk-!-margin-top-5">
			{{ govukTextarea({
				id: "redact-representation-notes-text",
				label: {
					text: "Notes",
					classes: "govuk-label--s"
				},
				name: "notes",
				value: notes
			}) }}

			{{ govukButton({
				text: "Save and continue",
				type: "submit"
			}) }}
		</div>
	</form>

	<script nonce="{{ cspNonce }}">
			const getSelectedText = (text, selectionStart, selectionEnd) => text.value.substring(selectionStart, selectionEnd);

			const updateTextValue = (text, replacementText, startIndex, endIndex) => {
				const startText = text.value.substring(0, startIndex);
				const endText = text.value.substring(endIndex, text.value.length);
				text.value = `${startText}${replacementText}${endText}`.trim();
			};

			const addNotesText = (notesText, selectedText) => (notesText.value += `${notesText.value ? "\n" : ""}${selectedText}`);

			const submitRedactRep = (redactRepText, notesText) => {
				const { selectionStart, selectionEnd } = redactRepText;
				const selectedText = getSelectedText(redactRepText, selectionStart, selectionEnd);
				if (!selectedText) return;
				updateTextValue(redactRepText, "(Redacted)", selectionStart, selectionEnd);
				addNotesText(notesText, selectedText);
			};

			const initRedactRepAction = () => {
				const submitRedactRepButton = document.querySelector("#submit-redact-representation");
				const redactRepText = document.querySelector("#redact-representation-text");
				const notesText = document.querySelector("#redact-representation-notes-text");

				submitRedactRepButton.addEventListener("click", (event) => {
					event.preventDefault();
					submitRedactRep(redactRepText, notesText);
					initRedactRepTextHeight(false, true);
				});
			};

			const hideOriginalRepSection = ({
					originalRepSection,
					redactRepSection,
					showOriginalRepButton
				}) => {
				originalRepSection.classList.add("govuk-!-display-none");
				redactRepSection.classList.add("govuk-grid-column-full");
				showOriginalRepButton.classList.remove("govuk-!-display-none");
				showOriginalRepButton.classList.add("govuk-!-display-inline-block");
			};

			const showOriginalRepSection = ({
					originalRepSection,
					redactRepSection,
					showOriginalRepButton
				}) => {
				originalRepSection.classList.remove("govuk-!-display-none");
				redactRepSection.classList.remove("govuk-grid-column-full");
				showOriginalRepButton.classList.add("govuk-!-display-none");
				showOriginalRepButton.classList.remove("govuk-!-display-inline-block");
			};

			const initRedactRepHideShow = () => {
				const hideSlowEls = {
					originalRepSection: document.querySelector("#original-representation-section"),
					redactRepSection: document.querySelector("#redact-representation-section"),
					hideOriginalRepButton: document.querySelector("#hide-original-representation-button"),
					showOriginalRepButton: document.querySelector("#show-original-representation-button")
				};

				hideSlowEls.hideOriginalRepButton.addEventListener("click", (event) => {
					event.preventDefault();
					hideOriginalRepSection(hideSlowEls);
					initRedactRepTextHeight();
				});

				hideSlowEls.showOriginalRepButton.addEventListener("click", (event) => {
					event.preventDefault();
					showOriginalRepSection(hideSlowEls);
					initRedactRepTextHeight();
				});
			};

			const initRedactRepTextHeight = (sizeRepresentationText = true, sizeRepresentationNotesText = true) => {
				if (sizeRepresentationText) {
					const redactRepresentationText = document.querySelector('#redact-representation-text');
					redactRepresentationText.style.height = '1px';
					redactRepresentationText.style.height = `${redactRepresentationText.scrollHeight + 5}px`;
				}

				if (sizeRepresentationNotesText) {
					const redactRepresentationNotesText = document.querySelector('#redact-representation-notes-text');
					redactRepresentationNotesText.style.height = '1px';
					redactRepresentationNotesText.style.height = `${redactRepresentationNotesText.scrollHeight + 5}px`;
				}
			}

			initRedactRepAction();
			initRedactRepHideShow();
			initRedactRepTextHeight();
	</script>
{% endblock %}
