{% extends "applications/layouts/applications.layout.njk" %}

{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/details/macro.njk" import govukDetails %}
{% from "govuk/components/textarea/macro.njk" import govukTextarea %}
{% from "applications/components/status-tag.component.njk" import statusTag %}
{% from "govuk/components/inset-text/macro.njk" import govukInsetText %}
{% from "govuk/components/table/macro.njk" import govukTable %}

{% block pageHeading %}
	<h1 class="govuk-heading-l govuk-!-margin-bottom-2">{{ organisationOrFullname }}</h1>

	{{ statusTag(statusText) }}

	<p class="govuk-body govuk-!-margin-0 govuk-!-margin-top-5">
		<strong>Project name:</strong> {{ projectName }}
	</p>
{% endblock %}

{% set pageTitle = "Redact representation" %}

{% block pageContent %}
	<form action="" method="post" novalidate>
		<div class="govuk-grid-row">
			<div class="govuk-grid-column-two-thirds">
				<input type="hidden" name="_csrf" value="{{ _csrf }}">

				<h2 class="govuk-heading-m">Redaction suggestions</h2>
				{% set hasSuggestions = redactionSuggestions.length > 0 %}
				{% if hasSuggestions %}
					<p class="govuk-body">
						We have suggested some common redactions and hidden these for you.
						To make these visible again, 'Reject' each suggestion.
					</p>
					{% set suggestionTableRows = [] %}
					{% for s in redactionSuggestions %}
						{% set category = s.category %}
						{% if s.subCategory %}
							{% set category = category + " (" +  s.subCategory + ")" %}
						{% endif %}
						{% set action = 'Accept' %}
						{% if s.accepted %}
							{% set action = 'Reject' %}
						{% endif %}
						{% set suggestionTableRows = (suggestionTableRows.push([
							{text: s.text},
							{text: category },
							{
								html: '<a href="#" class="govuk-link" data-redact="suggestion-reject-' + loop.index0 + '">' + action + '</a>'
							}
						]), suggestionTableRows) %}
					{% endfor %}
					{{ govukTable({
						head: [
							{
								text: "Redaction suggestion"
							},
							{
								text: "Type of information"
							},
							{
								text: "Action"
							}
						],
						rows: suggestionTableRows
					}) }}
				{% else %}
					<p class="govuk-body">
						No redaction suggestions found.
					</p>
				{% endif %}
			</div>
		</div>
		<div class="govuk-grid-row">
			<div class="govuk-grid-column-one-half">

				{{ govukDetails({
					summaryText: "Original representation",
					html: originalRepresentation,
					id: "representation-unredacted",
					open: true
				}) }}
			</div>
			<div class="govuk-grid-column-one-half">

				{{ govukTextarea({
					label: {
						text: "Redacted representation",
						classes: "govuk-label--s"
					},
					id: "redactedRepresentation",
					name: "redactedRepresentation",
					value: redactedRepresentation,
					errorMessage: errors["representation"] and {
						text: errors["representation"].msg
					},
					rows: 8,
					attributes: {
						readonly: true
					}
				}) }}

				<div class="govuk-button-group">
					{{ govukButton({
						text: "Redact selected text",
						classes: "govuk-button--secondary",
						id: "redact-selected-text",
						type: "button"
					}) }}

					{{ govukButton({
						text: "Undo",
						classes: "govuk-button--secondary",
						id: "redact-undo",
						type: "button"
					}) }}

					{{ govukButton({
						text: "Undo all changes",
						classes: "govuk-button--secondary",
						id: "redact-undo-all",
						type: "button"
					}) }}
				</div>
			</div>
		</div>
		<div class="govuk-grid-row">
			<div class="govuk-grid-column-one-half">
				{{ govukButton({
					text: "Save and continue",
					type: "submit",
					attributes: { "data-cy":"button-save-and-continue" }
				}) }}
			</div>
		</div>
	</form>

	<script nonce="{{ cspNonce }}">
		/**
		 * @param {HTMLTextAreaElement} textArea
		 * @param {HTMLButtonElement} redactSelectedText
		 * @param {HTMLButtonElement} redactUndo
		 * @param {HTMLButtonElement} redactUndoAll
		 * @param {HTMLDivElement} unredactedText
		 * @param {HTMLAnchorElement[]} rejectLinks
		 * @param {import('@azure/ai-text-analytics').PiiEntity[]} suggestions
		 * @param {HTMLAnchorElement} toggleOriginalRepresentation
		 */
		function registerEventListeners({textArea, redactSelectedText, redactUndo, redactUndoAll, unredactedText, rejectLinks, suggestions, toggleOriginalRepresentation}) {
			const formGroup = textArea.parentElement;
			const errorMessage = document.createElement('p');
			errorMessage.id = 'representation-error';
			errorMessage.classList.add('govuk-error-message');

			const history = [];

			function showError(message) {
				formGroup.classList.add('govuk-form-group--error');
				errorMessage.textContent = message;
				formGroup.prepend(errorMessage);
			}

			function hideError() {
				textArea.parentElement.classList.remove('govuk-form-group--error');
				errorMessage.remove();
			}

			redactSelectedText.addEventListener('click', () => {
				const { selectionStart, selectionEnd } = textArea;
				if (selectionStart === selectionEnd) {
					// no selected text
					showError('Select text to redact');
					return;
				}
				hideError();
				const selectedText = textArea.value.substring(selectionStart, selectionEnd);
				// check if the selected text already contains redacted characters
				if (selectedText.includes('█')) {
					showError('Selected text already includes redacted characters');
					return;
				}
				// replace the text with the 'full block' █ character
				const redactedText = '█'.repeat(selectionEnd - selectionStart);
				textArea.value = textArea.value.substring(0, selectionStart) + redactedText + textArea.value.substring(selectionEnd);
				// add to history for undo functionality
				history.push({
					selectionStart,
					selectionEnd,
					selectedText
				});
			});
			redactUndo.addEventListener('click', () => {
				const { selectionStart, selectionEnd, selectedText } = history.pop() || {};
				if (selectionStart !== undefined && selectionEnd !== undefined && selectedText) {
					hideError();
					textArea.value = textArea.value.substring(0, selectionStart) + selectedText + textArea.value.substring(selectionEnd);
				} else {
					showError('No changes to undo');
				}
			});
			redactUndoAll.addEventListener('click', () => {
				const unredated = unredactedText.textContent?.trim();
				if (history.length === 0 && textArea.value === unredated) {
					showError('No changes to undo');
					return;
				}
				hideError();
				textArea.value = unredated || '';
				history.length = 0;
			});
			for (const rejectLink of rejectLinks) {
				rejectLink.addEventListener('click', () => {
					const index = parseInt(rejectLink.getAttribute('data-redact').replace('suggestion-reject-', ''));
					const suggestion = suggestions[index];
					if (rejectLink.text === 'Reject') {
						textArea.value = textArea.value.substring(0, suggestion.offset) + suggestion.text + textArea.value.substring(suggestion.offset + suggestion.length);
						rejectLink.text = 'Accept';
					} else {
						const redactedText = '█'.repeat(suggestion.length);
						textArea.value = textArea.value.substring(0, suggestion.offset) + redactedText + textArea.value.substring(suggestion.offset + suggestion.length);
						rejectLink.text = 'Reject';
					}
				});
			}
			toggleOriginalRepresentation.addEventListener('click', (event) => {
				event.preventDefault();
				if (unredactedText.classList.contains('govuk-!-display-none')) {
					unredactedText.classList.remove('govuk-!-display-none');
					toggleOriginalRepresentation.text = 'Hide';
				} else {
					unredactedText.classList.add('govuk-!-display-none');
					toggleOriginalRepresentation.text = 'Show';
				}
			});
		}

		function initRedact() {
			const textArea = document.querySelector('#redactedRepresentation');
			const redactSelectedText = document.querySelector('#redact-selected-text');
			const redactUndo = document.querySelector('#redact-undo');
			const redactUndoAll = document.querySelector('#redact-undo-all');
			const unredactedText = document.querySelector('#representation-unredacted');
			const rejectLinks = document.querySelectorAll('[data-redact]');
			const toggleOriginalRepresentation = document.querySelector('#toggle-original-representation');
			{% if not redactionSuggestions %}
			{% set redactionSuggestions = [] %}
			{% endif %}
			const suggestions = {{ redactionSuggestions | dump | safe }}

			if (!textArea || !(textArea instanceof HTMLTextAreaElement)) {
				return;
			}
			if (!redactSelectedText || !(redactSelectedText instanceof HTMLButtonElement)) {
				return;
			}
			if (!redactUndo || !(redactUndo instanceof HTMLButtonElement)) {
				return;
			}
			if (!redactUndoAll || !(redactUndoAll instanceof HTMLButtonElement)) {
				return;
			}
			if (!unredactedText || !(unredactedText instanceof HTMLDivElement)) {
				return;
			}

			registerEventListeners({
				textArea,
				redactSelectedText,
				redactUndo,
				redactUndoAll,
				unredactedText,
				rejectLinks,
				suggestions,
				toggleOriginalRepresentation
			});
		}

		initRedact();
	</script>
{% endblock %}
