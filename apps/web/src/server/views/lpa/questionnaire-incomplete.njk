{% extends "lpa/layouts/appeal.njk" %}

{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/checkboxes/macro.njk" import govukCheckboxes %}
{% from "govuk/components/radios/macro.njk" import govukRadios %}
{% from "govuk/components/summary-list/macro.njk" import govukSummaryList %}
{% from "app/components/document-list.component.njk" import documentList %}

{% set pageTitle = 'Review incomplete questionnaire' %}
{% set questionnaire = appeal.reviewQuestionnaire %}

{% block appealContent %}
  <h2 class="govuk-heading-l">
    Information marked as missing or incorrect
  </h2>

  {{
    questionnaireSummaryList({
      appealId: appeal.AppealId,
      classes: 'govuk-!-margin-bottom-9',
      rows: [
        { answerType: 'applicationPlanningOfficersReportMissingOrIncorrect' },
        { answerType: 'applicationPlansToReachDecisionMissingOrIncorrect' },
        { answerType: 'policiesStatutoryDevelopmentPlanPoliciesMissingOrIncorrect' },
        { answerType: 'policiesOtherRelevantPoliciesMissingOrIncorrect' },
        { answerType: 'policiesSupplementaryPlanningDocumentsMissingOrIncorrect' },
        { answerType: 'siteConservationAreaMapAndGuidanceMissingOrIncorrect' },
        {
          answerType: 'siteListedBuildingDescriptionMissingOrIncorrect',
          description: appeal.ListedBuildingDesc or '-',
          action: {
            href: '/lpa/appeals/' + appeal.AppealId + '/edit-listed-building-description',
            text: "Update",
            visuallyHiddenText: 'siteListedBuildingDescriptionMissingOrIncorrect' | lpaLabel | lower
          }
        },
        { answerType: 'thirdPartyApplicationNotificationMissingOrIncorrect' },
        { answerType: 'thirdPartyApplicationPublicityMissingOrIncorrect'  },
        { answerType: 'thirdPartyRepresentationsMissingOrIncorrect' },
        { answerType: 'thirdPartyAppealNotificationMissingOrIncorrect' }
      ]
    })
  }}

  <form action="/lpa/appeals/{{ appeal.AppealId }}/questionnaire/complete" method="post" novalidate>
    {{
      govukRadios({
        idPrefix: "reviewComplete",
        name: "reviewComplete",
        errorMessage: errors.reviewComplete | errorMessage,
        fieldset: {
          legend: {
            text: "Mark questionnaire as complete?",
            classes: "govuk-fieldset__legend--l"
          }
        },
        items: [
          { value: true, text: "Yes" },
          { value: false, text: "No" }
        ]
      })
    }}
    {{ govukButton({ text: 'Save and continue' }) }}
  </form>
{% endblock %}

{% macro questionnaireSummaryList(params) %}
  {% set summaryListRows = [] %}

  {% for row in params.rows %}
    {% if questionnaire[row.answerType] %}
      {% set documentType = row.answerType | lpaDocumentType %}
      {% set descriptionKey = row.answerType + 'Description' %}
      {% set addressesKey = row.answerType + 'ListOfAddresses' %}
      {% set siteNoticeKey = row.answerType + 'CopyOfLetterOrSiteNotice' %}
      {% set details = null %}

      {% if questionnaire[descriptionKey] %}
        {% set details = questionnaire[descriptionKey] %}
      {% elseif questionnaire[addressesKey] or questionnaire[siteNoticeKey] %}
        {% set details = [] %}
        {% if questionnaire[addressesKey] %}
          {% set details = details | concat(addressesKey | lpaLabel) %}
        {% endif %}
        {% if questionnaire[siteNoticeKey] %}
          {% set details = details | concat(siteNoticeKey | lpaLabel) %}
        {% endif %}
      {% endif %}
      {% set summaryListRow = {
          key: {
            text: row.answerType | lpaLabel
          },
          value: {
            html: incompleteDetailsList({
              answerType: row.answerType,
              description: row.description,
              files: appeal.Documents | filter({ Type: documentType }),
              details: details
            })
          }
        }
      %}
      {% if row.action %}
        {% set summaryListRow = summaryListRow | assign({ actions: { items: [row.action] } }) %}
      {% else %}
        {% set summaryListRow = summaryListRow | assign({
          actions: {
            items: [
              {
                href: '/lpa/appeals/' + params.appealId + '/documents/' +  (documentType | lower | kebabCase),
                text: "Update",
                visuallyHiddenText: row.label | lower
              }
            ]
          }
        }) %}
      {% endif %}
      {% set summaryListRows = summaryListRows | concat(summaryListRow) %}
    {% endif %}
  {% endfor %}

  {{ govukSummaryList({ classes: params.classes, rows: summaryListRows }) }}
{% endmacro %}

{% macro incompleteDetailsList(params) %}
  <dl class="govuk-!-margin-top-2">
    {% if not isUndefined(params.description) %}
      <div class="govuk-!-margin-bottom-3">
        <dt class="govuk-!-font-weight-bold">Description:</dt>
        <dd>{{ params.description }}</dd>
      </div>
    {% elseif params.files %}
      <div class="govuk-!-margin-bottom-3">
        <dt class="govuk-!-font-weight-bold">Files:</dt>
        <dd>
          {% if params.files.length > 0 %}
            {{ documentList(params.files) }}
          {% else %}
            <p class="govuk-body">No files uploaded</p>
          {% endif %}
        </dd>
      </div>
    {% endif %}
    {% if params.details %}
      <div class="govuk-!-margin-bottom-3">
        <dt class="govuk-!-font-weight-bold">What is missing or incorrect?</dt>
        <dd>
          {% if isArray(params.details) %}
						<ul class="govuk-list govuk-list--bullet govuk-!-margin-bottom-0">
							{% for detail in params.details %}
					  		<li>{{ detail }}</li>
						  {% endfor %}
						</ul>
          {% else %}
            {{ params.details }}
          {% endif %}
        </dd>
      </div>
    {% endif %}
  </dl>
{% endmacro %}
