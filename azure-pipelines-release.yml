parameters:
  - name: region
    displayName: Region
    type: string
    values:
      - UK West
      - UK South
    default: UK West
  - name: schemaMigration
    displayName: Run Database Migration
    type: boolean
    default: true

pr: none
trigger: none

resources:
  repositories:
    - repository: templates
      type: github
      endpoint: Planning-Inspectorate
      name: Planning-Inspectorate/common-pipeline-templates
      ref: refs/tags/release/3.4.0

extends:
  template: stages/wrapper_cd.yml@templates
  parameters:
    deploymentStages:
      - name: Stage
        condition: eq(dependencies.semantic_release.outputs['run_semantic_release.versions.release'], 'true')
        deploymentJobs:
          - name: Stage API
            condition: eq(stageDependencies.semantic_release.run_semantic_release.outputs['versions.apiRelease'], 'true')
            steps:
              - template: ../steps/azure_web_app_docker_tag.yml
                parameters:
                  azurecrName: $(azurecrName)
                  repository: back-office/back-office-api
                  tag: v$(apiVersion)
              - ${{ if eq(parameters.schemaMigration, true) }}:
                - checkout: self
                - template: ../steps/azure_get_secrets.yml
                  parameters:
                    secrets:
                      - name: back-office-sql-connection-string
                        variable: DATABASE_URL
                - template: ../steps/node_script.yml
                  parameters:
                    nodeVersion: 18
                    environmentVariables:
                      DATABASE_URL: $(DATABASE_URL)
                    script: npm run db:migrate:prod
                    workingDirectory: $(Build.Repository.LocalPath)/apps/api
              - template: ../steps/azure_web_app_deploy.yml
                parameters:
                  appName: pins-app-back-office-api-$(ENVIRONMENT)-$(REGION_SHORT)-001
                  appResourceGroup: $(resourceGroup)
                  appSlotName: staging
                  azurecrName: $(azurecrName)
                  repository: back-office/back-office-api
                  tag: v$(apiVersion)
            variables:
              - name: apiVersion
                value: $[ stageDependencies.semantic_release.run_semantic_release.outputs['versions.apiVersion'] ]
          - name: Stage Web
            condition: eq(stageDependencies.semantic_release.run_semantic_release.outputs['versions.webRelease'], 'true')
            steps:
              - template: ../steps/azure_web_app_docker_tag.yml
                parameters:
                  azurecrName: $(azurecrName)
                  repository: back-office/back-office-web
                  tag: v$(webVersion)
              - template: ../steps/azure_web_app_deploy.yml
                parameters:
                  appName: pins-app-back-office-wfe-$(ENVIRONMENT)-$(REGION_SHORT)-001
                  appResourceGroup: $(resourceGroup)
                  appSlotName: staging
                  azurecrName: $(azurecrName)
                  repository: back-office/back-office-web
                  tag: v$(webVersion)
            variables:
              - name: webVersion
                value: $[ stageDependencies.semantic_release.run_semantic_release.outputs['versions.webVersion'] ]
      - name: Deploy
        dependsOn:
          - Stage
        deploymentJobs:
          - name: Deploy API
            steps:
              - template: ../steps/azure_web_app_slot_swap.yml
                parameters:
                  appName: pins-app-back-office-api-$(ENVIRONMENT)-$(REGION_SHORT)-001
                  appResourceGroup: $(resourceGroup)
                  appStagingSlotName: staging
                  appTargetSlotName: production
          - name: Deploy Web
            steps:
              - template: ../steps/azure_web_app_slot_swap.yml
                parameters:
                  appName: pins-app-back-office-wfe-$(ENVIRONMENT)-$(REGION_SHORT)-001
                  appResourceGroup: $(resourceGroup)
                  appStagingSlotName: staging
                  appTargetSlotName: production
          - name: Deploy Document Check Function
            artifact:
              name: document-check-functions
              sourcePipeline: Back Office Build
            steps:
              - template: ../steps/function_app_deploy.yml
                appName: pins-func-doc-check-doc-check-$(ENVIRONMENT)-$(REGION_SHORT)-001
                resourceGroup: $(resourceGroup)
          - name: Deploy Document Publish Function
            artifact:
              name: document-publish-function
              sourcePipeline: Back Office Build
            steps:
              - template: ../steps/function_app_deploy.yml
                appName: pins-func-doc-publisher-doc-publisher-$(ENVIRONMENT)-$(REGION_SHORT)-001
                resourceGroup: $(resourceGroup)
          - name: Deploy ODW Integration Functions
            artifact:
              name: odw-integration-functions
              sourcePipeline: Back Office Build
            steps:
              - template: ../steps/function_app_deploy.yml
                appName: pins-func-odw-subscriber-odw-subscriber-$(ENVIRONMENT)-$(REGION_SHORT)-001
                resourceGroup: $(resourceGroup)
    preDeploymentStages:
      - name: Semantic Release
        jobs:
          - name: Run Semantic Release
            timeoutInMinutes: 0
            steps:
              - checkout: self
                clean: true
                persistCredentials: true
              - template: ../steps/node_script.yml
                parameters:
                  nodeVersion: 18
                  script: npm ci
              - template: ../steps/node_script.yml
                parameters:
                  nodeVersion: 18
                  script: npm run release
                  environmentVariables:
                    GH_TOKEN: $(GH_TOKEN)
              - script: |
                  API_VERSION=$(cat apps/api/.release-version)
                  DOCUMENT_STORAGE_API_VERSION=$(cat apps/document-storage/.release-version)
                  WEB_VERSION=$(cat apps/web/.release-version)
                  DOCUMENT_CHECK_FUNCTION_VERSION=$(cat apps/document-check-function/.release-version)
                  DOCUMENT_PUBLISH_FUNCTION_VERSION=$(cat apps/document-publish-function/.release-version)
                  ODW_INTEGRATION_FUNCTION_VERSION=$(cat apps/functions/odw-integration/.release-version)

                  RELEASE=false

                  if [[ ! -z "$API_VERSION" ]]; then
                    echo "API version: $API_VERSION"
                    echo "##vso[task.setvariable variable=apiVersion;isOutput=true]$API_VERSION"
                    echo "##vso[task.setvariable variable=apiRelease;isOutput=true]true"
                    RELEASE=true
                  else
                    API_VERSION=$(git describe --match "api@*" --abbrev=0 --tags $(git rev-list --tags --max-count=1))
                    echo "API version: $API_VERSION (No change)"
                  fi

                  if [[ ! -z "$WEB_VERSION" ]]; then
                    echo "Web version: $WEB_VERSION"
                    echo "##vso[task.setvariable variable=webVersion;isOutput=true]$WEB_VERSION"
                    echo "##vso[task.setvariable variable=webRelease;isOutput=true]true"
                    RELEASE=true
                  else
                    WEB_VERSION=$(git describe --match "web@*" --abbrev=0 --tags $(git rev-list --tags --max-count=1))
                    echo "API version: $WEB_VERSION (No change)"
                  fi

                  if [[ ! -z "$DOCUMENT_CHECK_FUNCTION_VERSION" ]]; then
                    echo "Document check function version: $DOCUMENT_CHECK_FUNCTION_VERSION"
                    echo "##vso[task.setvariable variable=documentCheckFunctionVersion;isOutput=true]$DOCUMENT_CHECK_FUNCTION_VERSION"
                    echo "##vso[task.setvariable variable=documentCheckFunctionRelease;isOutput=true]true"
                    RELEASE=true
                  else
                    DOCUMENT_CHECK_FUNCTION_VERSION=$(git describe --match "document-check-function@*" --abbrev=0 --tags $(git rev-list --tags --max-count=1))
                    echo "Function version: $DOCUMENT_CHECK_FUNCTION_VERSION (No change)"
                  fi

                  if [[ ! -z "$DOCUMENT_PUBLISH_FUNCTION_VERSION" ]]; then
                    echo "Web version: $DOCUMENT_PUBLISH_FUNCTION_VERSION"
                    echo "##vso[task.setvariable variable=documentPublishFunctionVersion;isOutput=true]$DOCUMENT_PUBLISH_FUNCTION_VERSION"
                    echo "##vso[task.setvariable variable=documentPublishFunctionRelease;isOutput=true]true"
                    RELEASE=true
                  else
                    DOCUMENT_PUBLISH_FUNCTION_VERSION=$(git describe --match "document-publish-function@*" --abbrev=0 --tags $(git rev-list --tags --max-count=1))
                    echo "Function version: $DOCUMENT_PUBLISH_FUNCTION_VERSION (No change)"
                  fi

                  if [[ ! -z "$ODW_INTEGRATION_FUNCTION_VERSION" ]]; then
                    echo "Web version: $ODW_INTEGRATION_FUNCTION_VERSION"
                    echo "##vso[task.setvariable variable=odwIntegrationFunctionVersion;isOutput=true]$ODW_INTEGRATION_FUNCTION_VERSION"
                    echo "##vso[task.setvariable variable=odwIntegrationFunctionRelease;isOutput=true]true"
                    RELEASE=true
                  else
                    ODW_INTEGRATION_FUNCTION_VERSION=$(git describe --match "odw-integration@*" --abbrev=0 --tags $(git rev-list --tags --max-count=1))
                    echo "Function version: $ODW_INTEGRATION_FUNCTION_VERSION (No change)"
                  fi

                  if [[ $RELEASE == true ]]; then
                    echo "##vso[task.setvariable variable=release;isOutput=true]true"
                  fi
                displayName: Display next versions
                name: versions
    environments:
      - name: Prod
    globalVariables:
      - template: azure-pipelines-variables.yml@self
