import api from './back-office-api-client.js';

/**
 *
 * @param {import('@azure/functions').Context} context
 * @param {*} msg
 */
export default async function (context, msg) {
	if (!msg?.data) {
		throw new Error('received no input');
	}

	const info = getInfoFromBlobURI(msg.data.blobUri);
	if (!info) {
		context.log.warn(
			`Stopped: not possible to extract info from blob with URI ${msg.data.blobUri}`
		);
		return;
	}

	await api.patch(info, statusFromScanResult(msg.data.scanResultType), context);
}

/**
 * @param {string} scanResult
 * @returns {string}
 * @throws {Error}
 * */
const statusFromScanResult = (scanResult) => {
	switch (scanResult) {
		case 'Malicious':
			return 'failed_virus_check';
		case 'No threats found':
			return 'checked';
		default:
			throw new Error(`could not map scan result '${scanResult}' to a document status`);
	}
};

/**
 * @param {string} uri
 * @returns {{ id: string, reference: string, version: string} | null}
 * */
const getInfoFromBlobURI = (uri) => {
	const match = uri.match(/^.+\/bo-appeals-documents\/appeal\/(.+?)\/(.+?)\/(.+?)\//);
	const reference = match?.[1] ?? null;
	const id = match?.[2] ?? null;
	const version = match?.[3] ?? null;

	if (reference && id && version) {
		return {
			reference,
			id,
			version
		};
	}

	return null;
};
