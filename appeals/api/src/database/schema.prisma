generator client {
  provider = "prisma-client-js"
  output   = "../server/utils/db-client"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

/// Appeal model
/// Contains information of an Appeal that has been submitted to the Back Office
/// TODO: Migrate this model to integrated into the Case model same as with Applications
model Appeal {
  id                           Int                   @id @default(autoincrement())
  reference                    String                @unique
  createdAt                    DateTime              @default(now())
  updatedAt                    DateTime              @default(now())
  addressId                    Int?
  localPlanningDepartment      String
  planningApplicationReference String
  startedAt                    DateTime?
  appellantId                  Int?                  @unique
  appealTypeId                 Int?
  linkedAppealId               Int?
  otherAppealId                Int?
  dueDate                      DateTime?
  allocationId                 Int?
  address                      Address?              @relation(fields: [addressId], references: [id])
  appealType                   AppealType?           @relation(fields: [appealTypeId], references: [id])
  appellant                    Appellant?            @relation(fields: [appellantId], references: [id])
  allocation                   AppealAllocation?
  specialisms                  AppealSpecialism[]
  appellantCase                AppellantCase?
  appealStatus                 AppealStatus[]
  inspectorDecision            InspectorDecision?
  lpaQuestionnaire             LPAQuestionnaire?
  reviewQuestionnaire          ReviewQuestionnaire[]
  siteVisit                    SiteVisit?
  validationDecision           ValidationDecision[]
  appealTimetable              AppealTimetable?
  linkedAppeal                 Appeal?               @relation("LinkedAppeals", fields: [linkedAppealId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  linkedAppeals                Appeal[]              @relation("LinkedAppeals")
  otherAppeal                  Appeal?               @relation("OtherAppeals", fields: [otherAppealId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  otherAppeals                 Appeal[]              @relation("OtherAppeals")
  folders                      Folder[]
  documents                    Document[]
  caseOfficerUserId            Int?
  caseOfficer                  User?                 @relation("caseOfficer", fields: [caseOfficerUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  inspectorUserId              Int?
  inspector                    User?                 @relation("inspector", fields: [inspectorUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// AppealType model
/// Lookup table for types of Appeals, such as HAS and FPA
model AppealType {
  id        Int      @id @default(autoincrement())
  type      String   @unique
  shorthand String   @unique
  Appeal    Appeal[]
}

/// AppealTimetable model
model AppealTimetable {
  id                      Int       @id @default(autoincrement())
  appealId                Int       @unique
  finalCommentReviewDate  DateTime?
  issueDeterminationDate  DateTime?
  lpaQuestionnaireDueDate DateTime?
  statementReviewDate     DateTime?
  appeal                  Appeal    @relation(fields: [appealId], references: [id])
}

/// AppealStatus model
/// Stores the current and past statuses of Appeals
/// Uses the `valid` value to mark statuses as current if True and past if False
/// An appeal might have multiple valid statuses depending on the type of Appeal
/// which can be built up into a compound status using the `subStateMachineName`
/// `compoundStateName` values.
model AppealStatus {
  id                  Int      @id @default(autoincrement())
  status              String   @default("ready_to_start")
  createdAt           DateTime @default(now())
  valid               Boolean  @default(true)
  appealId            Int
  subStateMachineName String?
  compoundStateName   String?
  appeal              Appeal   @relation(fields: [appealId], references: [id])
}

/// AppealAllocation model
/// Stores the current allocation and specialisms for a single appeal
model AppealAllocation {
  id       Int     @id @default(autoincrement())
  appealId Int     @unique
  level    String
  band     Int
  appeal   Appeal? @relation(fields: [appealId], references: [id])
}

/// AppealAllocation model
/// Stores the current allocation and specialisms for a single appeal
model AppealSpecialism {
  id           Int        @id @default(autoincrement())
  specialismId Int
  appealId     Int
  appeal       Appeal     @relation(fields: [appealId], references: [id])
  specialism   Specialism @relation(fields: [specialismId], references: [id])
}

/// Appellant model
/// Contains information about the person who created the Appeal
model Appellant {
  id        Int     @id @default(autoincrement())
  name      String
  company   String?
  email     String
  agentName String?
  appeal    Appeal?
}

/// AppellantCase model
/// Contains information from the questionnaire that the Appellant
/// would have filled out when submitting the Appeal
model AppellantCase {
  id                                             Int                                            @id @default(autoincrement())
  appealId                                       Int                                            @unique
  appellantCaseIncompleteReasonId                Int?
  appellantCaseInvalidReasonId                   Int?
  appellantCaseValidationOutcomeId               Int?
  knowledgeOfOtherLandownersId                   Int?
  planningObligationStatusId                     Int?
  applicantFirstName                             String?
  applicantSurname                               String?
  areAllOwnersKnown                              Boolean?
  hasAdvertisedAppeal                            Boolean?
  hasAttemptedToIdentifyOwners                   Boolean?
  hasDesignAndAccessStatement                    Boolean?
  hasHealthAndSafetyIssues                       Boolean?
  hasNewPlansOrDrawings                          Boolean?
  hasNewSupportingDocuments                      Boolean?
  hasOtherTenants                                Boolean?
  hasPlanningObligation                          Boolean?
  hasSeparateOwnershipCertificate                Boolean?
  hasSubmittedDesignAndAccessStatement           Boolean?
  hasToldOwners                                  Boolean?
  hasToldTenants                                 Boolean?
  healthAndSafetyIssues                          String?
  isAgriculturalHolding                          Boolean?
  isAgriculturalHoldingTenant                    Boolean?
  isAppellantNamedOnApplication                  Boolean?
  isDevelopmentDescriptionStillCorrect           Boolean?
  isSiteFullyOwned                               Boolean?
  isSitePartiallyOwned                           Boolean?
  isSiteVisibleFromPublicRoad                    Boolean?
  newDevelopmentDescription                      String?
  visibilityRestrictions                         String?
  appeal                                         Appeal                                         @relation(fields: [appealId], references: [id])
  knowledgeOfOtherLandowners                     KnowledgeOfOtherLandowners?                    @relation(fields: [knowledgeOfOtherLandownersId], references: [id])
  planningObligationStatus                       PlanningObligationStatus?                      @relation(fields: [planningObligationStatusId], references: [id])
  appellantCaseValidationOutcome                 AppellantCaseValidationOutcome?                @relation(fields: [appellantCaseValidationOutcomeId], references: [id])
  appellantCaseInvalidReason                     AppellantCaseInvalidReason?                    @relation(fields: [appellantCaseInvalidReasonId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  appellantCaseIncompleteReason                  AppellantCaseIncompleteReason?                 @relation(fields: [appellantCaseIncompleteReasonId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  appellantCaseIncompleteReasonsOnAppellantCases AppellantCaseIncompleteReasonOnAppellantCase[]
  appellantCaseInvalidReasonsOnAppellantCases    AppellantCaseInvalidReasonOnAppellantCase[]
}

/// ServiceCustomer model
/// Contains data of people who submitted Applications
model ServiceCustomer {
  id               Int      @id @default(autoincrement())
  organisationName String?
  firstName        String?
  middleName       String?
  lastName         String?
  email            String?
  website          String?
  phoneNumber      String?
  addressId        Int?
  caseId           Int
  address          Address? @relation(fields: [addressId], references: [id])
}

/// Address model
/// Contains information on addresses
model Address {
  id                      Int                       @id @default(autoincrement())
  addressLine1            String?
  addressLine2            String?
  postcode                String?
  county                  String?
  town                    String?
  country                 String?
  Appeal                  Appeal[]
  ServiceCustomer         ServiceCustomer[]
  RepresentationContact   RepresentationContact[]
  NeighbouringSiteContact NeighbouringSiteContact[]
}

/// ValidationDecision model
/// Contains decision from validation officer regarding the validity of an appeal
model ValidationDecision {
  id                         Int      @id @default(autoincrement())
  appealId                   Int
  createdAt                  DateTime @default(now())
  decision                   String
  namesDoNotMatch            Boolean  @default(false)
  sensitiveInfo              Boolean  @default(false)
  missingApplicationForm     Boolean  @default(false)
  missingDecisionNotice      Boolean  @default(false)
  missingGroundsForAppeal    Boolean  @default(false)
  missingSupportingDocuments Boolean  @default(false)
  inflammatoryComments       Boolean  @default(false)
  openedInError              Boolean  @default(false)
  wrongAppealTypeUsed        Boolean  @default(false)
  outOfTime                  Boolean  @default(false)
  noRightOfAppeal            Boolean  @default(false)
  notAppealable              Boolean  @default(false)
  lPADeemedInvalid           Boolean  @default(false)
  otherReasons               String?
  descriptionOfDevelopment   String?
  appeal                     Appeal   @relation(fields: [appealId], references: [id])
}

/// LPAQuestionnaire model
/// Contains responses from Local Planning Authority (LPA)
/// regarding a specific appeal
model LPAQuestionnaire {
  id                                                 Int                                                  @id @default(autoincrement())
  appealId                                           Int                                                  @unique
  lpaQuestionnaireValidationOutcomeId                Int?
  procedureTypeId                                    Int?
  scheduleTypeId                                     Int?
  communityInfrastructureLevyAdoptionDate            DateTime?
  developmentDescription                             String?
  doesAffectAListedBuilding                          Boolean?
  doesAffectAScheduledMonument                       Boolean?
  doesSiteHaveHealthAndSafetyIssues                  Boolean?
  doesSiteRequireInspectorAccess                     Boolean?
  extraConditions                                    String?
  hasCommunityInfrastructureLevy                     Boolean?
  hasCompletedAnEnvironmentalStatement               Boolean?
  hasEmergingPlan                                    Boolean?
  hasExtraConditions                                 Boolean?
  hasOtherAppeals                                    Boolean?
  hasProtectedSpecies                                Boolean?
  hasRepresentationsFromOtherParties                 Boolean?
  hasResponsesOrStandingAdviceToUpload               Boolean?
  hasStatementOfCase                                 Boolean?
  hasStatutoryConsultees                             Boolean?
  hasSupplementaryPlanningDocuments                  Boolean?
  hasTreePreservationOrder                           Boolean?
  healthAndSafetyDetails                             String?
  inCAOrrelatesToCA                                  Boolean?
  includesScreeningOption                            Boolean?
  inquiryDays                                        Int?
  inspectorAccessDetails                             String?
  isAffectingNeighbouringSites                       Boolean?
  isCommunityInfrastructureLevyFormallyAdopted       Boolean?
  isConservationArea                                 Boolean?
  isCorrectAppealType                                Boolean?
  isDevelopmentInOrNearDesignatedSites               Boolean?
  isGypsyOrTravellerSite                             Boolean?
  isListedBuilding                                   Boolean?
  isPublicRightOfWay                                 Boolean?
  isSensitiveArea                                    Boolean?
  isSiteVisible                                      Boolean?
  isTheSiteWithinAnAONB                              Boolean?
  meetsOrExceedsThresholdOrCriteriaInColumn2         Boolean?
  receivedAt                                         DateTime?
  isEnvironmentalStatementRequired                   Boolean?
  sensitiveAreaDetails                               String?
  sentAt                                             DateTime                                             @default(now())
  siteWithinGreenBelt                                Boolean?
  statutoryConsulteesDetails                         String?
  appeal                                             Appeal                                               @relation(fields: [appealId], references: [id])
  procedureType                                      ProcedureType?                                       @relation(fields: [procedureTypeId], references: [id])
  scheduleType                                       ScheduleType?                                        @relation(fields: [scheduleTypeId], references: [id])
  designatedSites                                    DesignatedSitesOnLPAQuestionnaires[]
  lpaNotificationMethods                             LPANotificationMethodsOnLPAQuestionnaires[]
  listedBuildingDetails                              ListedBuildingDetails[]
  lpaQuestionnaireValidationOutcome                  LPAQuestionnaireValidationOutcome?                   @relation(fields: [lpaQuestionnaireValidationOutcomeId], references: [id])
  lpaQuestionnaireIncompleteReasonOnLPAQuestionnaire LPAQuestionnaireIncompleteReasonOnLPAQuestionnaire[]
  neighbouringSiteContact                            NeighbouringSiteContact[]
}

/// ReviewQuestionnaire model
/// Contains information on validity and completeness of LPA questionnaire
/// as decided by a case officer for an appeal.
model ReviewQuestionnaire {
  id                                                                          Int      @id @default(autoincrement())
  appealId                                                                    Int
  createdAt                                                                   DateTime @default(now())
  complete                                                                    Boolean  @default(false)
  applicationPlanningOfficersReportMissingOrIncorrect                         Boolean  @default(false)
  applicationPlansToReachDecisionMissingOrIncorrect                           Boolean  @default(false)
  applicationPlansToReachDecisionMissingOrIncorrectDescription                String?
  policiesStatutoryDevelopmentPlanPoliciesMissingOrIncorrect                  Boolean  @default(false)
  policiesStatutoryDevelopmentPlanPoliciesMissingOrIncorrectDescription       String?
  policiesOtherRelevantPoliciesMissingOrIncorrect                             Boolean  @default(false)
  policiesOtherRelevantPoliciesMissingOrIncorrectDescription                  String?
  policiesSupplementaryPlanningDocumentsMissingOrIncorrect                    Boolean  @default(false)
  policiesSupplementaryPlanningDocumentsMissingOrIncorrectDescription         String?
  siteConservationAreaMapAndGuidanceMissingOrIncorrect                        Boolean  @default(false)
  siteConservationAreaMapAndGuidanceMissingOrIncorrectDescription             String?
  siteListedBuildingDescriptionMissingOrIncorrect                             Boolean  @default(false)
  siteListedBuildingDescriptionMissingOrIncorrectDescription                  String?
  thirdPartyApplicationNotificationMissingOrIncorrect                         Boolean  @default(false)
  thirdPartyApplicationNotificationMissingOrIncorrectListOfAddresses          Boolean  @default(false)
  thirdPartyApplicationNotificationMissingOrIncorrectCopyOfLetterOrSiteNotice Boolean  @default(false)
  thirdPartyApplicationPublicityMissingOrIncorrect                            Boolean  @default(false)
  thirdPartyRepresentationsMissingOrIncorrect                                 Boolean  @default(false)
  thirdPartyRepresentationsMissingOrIncorrectDescription                      String?
  thirdPartyAppealNotificationMissingOrIncorrect                              Boolean  @default(false)
  thirdPartyAppealNotificationMissingOrIncorrectListOfAddresses               Boolean  @default(false)
  thirdPartyAppealNotificationMissingOrIncorrectCopyOfLetterOrSiteNotice      Boolean  @default(false)
  appeal                                                                      Appeal   @relation(fields: [appealId], references: [id])
}

/// SiteVisit model
/// Contains information regarding a scheduled site visit for an appeal
model SiteVisit {
  id              Int            @id @default(autoincrement())
  appealId        Int            @unique
  siteVisitTypeId Int?
  visitDate       DateTime?
  visitStartTime  String?
  visitEndTime    String?
  appeal          Appeal         @relation(fields: [appealId], references: [id])
  siteVisitType   SiteVisitType? @relation(fields: [siteVisitTypeId], references: [id])
}

/// InspectorDecision model
/// Contains decisioin made by an inspector against an appeal post site visit
model InspectorDecision {
  id                     Int     @id @default(autoincrement())
  appealId               Int     @unique
  outcome                String
  decisionLetterFilename String?
  appeal                 Appeal  @relation(fields: [appealId], references: [id])
}

/// User model
/// Contains information on Back Office users (PINS employees)
model User {
  id             Int              @id @default(autoincrement())
  azureUserId    String?          @unique
  Representation Representation[]
  caseOfficer    Appeal[]         @relation("caseOfficer")
  inspector      Appeal[]         @relation("inspector")
}

/// Folder model
/// Represents a container for documents.
/// This exists to specify the structure with which documents are displayed
/// in the back office (not the front office).
/// The path contains the stage and document type, joined by a /
model Folder {
  id        Int        @id @default(autoincrement())
  path      String
  caseId    Int
  documents Document[]
  case      Appeal?    @relation(fields: [caseId], references: [id])

  @@unique([caseId, path])
}

/// Document model
/// Contains information about the documents that are saved against a case.
/// This model is a central space for each document which might have several
/// versions and can store shared metadata.
model Document {
  guid                     String                    @id @default(uuid())
  name                     String
  folderId                 Int
  createdAt                DateTime                  @default(now())
  isDeleted                Boolean                   @default(false)
  latestVersionId          Int?
  caseId                   Int
  folder                   Folder                    @relation(fields: [folderId], references: [id])
  documentVersion          DocumentVersion[]         @relation("VersionHistory")
  representationAttachment RepresentationAttachment? @relation("AttachmentDocument")
  latestDocumentVersion    DocumentVersion?          @relation("LatestVersion", fields: [guid, latestVersionId], references: [documentGuid, version], onUpdate: NoAction, onDelete: NoAction)
  case                     Appeal                    @relation(fields: [caseId], references: [id], onUpdate: NoAction, onDelete: NoAction)

  @@unique([name, folderId])
  @@unique([guid, latestVersionId])
}

/// DocumentVersion model
/// Stores information pertaining to each version of a document.
/// Versions are stored against the `version` value (starting with 1).
/// The physical location of these documents should be stored here.
model DocumentVersion {
  documentGuid           String
  version                Int
  lastModified           DateTime?
  documentType           String?
  published              Boolean   @default(false)
  sourceSystem           String    @default("back-office")
  origin                 String?
  originalFilename       String?
  fileName               String?
  representative         String?
  description            String?
  owner                  String?
  author                 String?
  securityClassification String?
  mime                   String?
  horizonDataID          String?
  fileMD5                String?
  path                   String?
  virusCheckStatus       String?
  size                   Int?
  stage                  String?
  filter1                String?
  blobStorageContainer   String?
  blobStoragePath        String?
  dateCreated            DateTime? @default(now())
  datePublished          DateTime?
  isDeleted              Boolean   @default(false)
  examinationRefNo       String?
  filter2                String?
  publishedStatus        String?   @default("awaiting_upload")
  publishedStatusPrev    String?
  redactedStatus         String?
  redacted               Boolean   @default(false)
  documentURI            String?
  dateReceived           DateTime?
  parentDocument         Document? @relation("VersionHistory", fields: [documentGuid], references: [guid])
  latestVersionDocument  Document? @relation("LatestVersion")

  @@id([documentGuid, version])
  @@index([filter1], map: "filter1")
  @@index([documentGuid], map: "documentGuid")
}

/// Representation model
model Representation {
  id                     Int                        @id @default(autoincrement())
  reference              String
  caseId                 Int
  status                 String
  originalRepresentation String                     @db.NText
  redactedRepresentation String?                    @db.NText
  redacted               Boolean                    @default(false)
  userId                 Int?
  received               DateTime?
  user                   User?                      @relation(fields: [userId], references: [id])
  type                   String? // Local authorities | Members of the public/businesses | Non-statutory organisations | Statutory consultees | Parish councils
  contacts               RepresentationContact[]
  attachments            RepresentationAttachment[]
  representationActions  RepresentationAction[]

  @@index([reference], name: "reference")
}

/// RepresentationContact model
model RepresentationContact {
  id               Int            @id @default(autoincrement())
  representationId Int
  firstName        String?
  lastName         String?
  jobTitle         String?
  under18          Boolean?
  type             String? // AGENT|PERSON|ORGANISATION|FAMILY_GROUP
  organisationName String?
  email            String?
  phoneNumber      String?
  contactMethod    String? // Email | Phone Number
  addressId        Int?
  address          Address?       @relation(fields: [addressId], references: [id])
  Representation   Representation @relation(fields: [representationId], references: [id])
}

// RepresentationAction model
model RepresentationAction {
  id                   Int            @id @default(autoincrement())
  representationId     Int
  type                 String? // STATUS | REDACTION | REDACT_STATUS
  status               String?
  previousStatus       String?
  redactStatus         Boolean?
  previousRedactStatus Boolean?
  invalidReason        String?
  referredTo           String?
  actionBy             String
  actionDate           DateTime
  notes                String?        @db.NText
  Representation       Representation @relation(fields: [representationId], references: [id])
}

//  RepresentationAttachment model
model RepresentationAttachment {
  id               Int            @id @default(autoincrement())
  representationId Int
  documentGuid     String         @unique
  Representation   Representation @relation(fields: [representationId], references: [id], onUpdate: NoAction)
  Document         Document       @relation("AttachmentDocument", fields: [documentGuid], references: [guid])
}

model ProcedureType {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  LPAQuestionnaire LPAQuestionnaire[]
}

model ScheduleType {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  LPAQuestionnaire LPAQuestionnaire[]
}

model DesignatedSite {
  id                Int                                  @id @default(autoincrement())
  name              String                               @unique
  description       String
  lpaQuestionnaires DesignatedSitesOnLPAQuestionnaires[]
}

model DesignatedSitesOnLPAQuestionnaires {
  designatedSite     DesignatedSite   @relation(fields: [designatedSiteId], references: [id])
  designatedSiteId   Int
  lpaQuestionnaire   LPAQuestionnaire @relation(fields: [lpaQuestionnaireId], references: [id])
  lpaQuestionnaireId Int

  @@id([designatedSiteId, lpaQuestionnaireId])
}

model LPANotificationMethods {
  id                Int                                         @id @default(autoincrement())
  name              String                                      @unique
  lpaQuestionnaires LPANotificationMethodsOnLPAQuestionnaires[]
}

model LPANotificationMethodsOnLPAQuestionnaires {
  lpaNotificationMethod LPANotificationMethods @relation(fields: [notificationMethodId], references: [id])
  notificationMethodId  Int
  lpaQuestionnaire      LPAQuestionnaire       @relation(fields: [lpaQuestionnaireId], references: [id])
  lpaQuestionnaireId    Int

  @@id([notificationMethodId, lpaQuestionnaireId])
}

model ListedBuildingDetails {
  id                    Int               @id @default(autoincrement())
  lpaQuestionnaireId    Int?
  listEntry             String?
  affectsListedBuilding Boolean           @default(false)
  lpaQuestionnaire      LPAQuestionnaire? @relation(fields: [lpaQuestionnaireId], references: [id])
}

model PlanningObligationStatus {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  AppellantCase AppellantCase[]
}

model KnowledgeOfOtherLandowners {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  AppellantCase AppellantCase[]
}

model AppellantCaseValidationOutcome {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  AppellantCase AppellantCase[]
}

model AppellantCaseIncompleteReason {
  id                                             Int                                            @id @default(autoincrement())
  name                                           String                                         @unique
  hasText                                        Boolean                                        @default(false)
  AppellantCase                                  AppellantCase[]
  AppellantCaseIncompleteReasonsOnAppellantCases AppellantCaseIncompleteReasonOnAppellantCase[]
}

model AppellantCaseInvalidReason {
  id                                          Int                                         @id @default(autoincrement())
  name                                        String                                      @unique
  hasText                                     Boolean                                     @default(false)
  AppellantCase                               AppellantCase[]
  AppellantCaseInvalidReasonsOnAppellantCases AppellantCaseInvalidReasonOnAppellantCase[]
}

model AppellantCaseIncompleteReasonOnAppellantCase {
  appellantCaseIncompleteReason     AppellantCaseIncompleteReason       @relation(fields: [appellantCaseIncompleteReasonId], references: [id])
  appellantCaseIncompleteReasonId   Int
  appellantCase                     AppellantCase                       @relation(fields: [appellantCaseId], references: [id])
  appellantCaseId                   Int
  appellantCaseIncompleteReasonText AppellantCaseIncompleteReasonText[]

  @@id([appellantCaseIncompleteReasonId, appellantCaseId])
}

model AppellantCaseInvalidReasonOnAppellantCase {
  appellantCaseInvalidReason     AppellantCaseInvalidReason       @relation(fields: [appellantCaseInvalidReasonId], references: [id])
  appellantCaseInvalidReasonId   Int
  appellantCase                  AppellantCase                    @relation(fields: [appellantCaseId], references: [id])
  appellantCaseId                Int
  appellantCaseInvalidReasonText AppellantCaseInvalidReasonText[]

  @@id([appellantCaseInvalidReasonId, appellantCaseId])
}

model LPAQuestionnaireValidationOutcome {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  lpaQuestionnaire LPAQuestionnaire[]
}

model LPAQuestionnaireIncompleteReason {
  id                                                 Int                                                  @id @default(autoincrement())
  name                                               String                                               @unique
  hasText                                            Boolean                                              @default(false)
  lpaQuestionnaireIncompleteReasonOnLPAQuestionnaire LPAQuestionnaireIncompleteReasonOnLPAQuestionnaire[]
}

model LPAQuestionnaireIncompleteReasonOnLPAQuestionnaire {
  lpaQuestionnaireIncompleteReason     LPAQuestionnaireIncompleteReason       @relation(fields: [lpaQuestionnaireIncompleteReasonId], references: [id])
  lpaQuestionnaireIncompleteReasonId   Int
  lpaQuestionnaire                     LPAQuestionnaire                       @relation(fields: [lpaQuestionnaireId], references: [id])
  lpaQuestionnaireId                   Int
  lpaQuestionnaireIncompleteReasonText LPAQuestionnaireIncompleteReasonText[]

  @@id([lpaQuestionnaireIncompleteReasonId, lpaQuestionnaireId])
}

model NeighbouringSiteContact {
  id                 Int               @id @default(autoincrement())
  addressId          Int?
  lpaQuestionnaireId Int?
  firstName          String
  lastName           String?
  telephone          String
  email              String
  lpaQuestionnaire   LPAQuestionnaire? @relation(fields: [lpaQuestionnaireId], references: [id])
  address            Address?          @relation(fields: [addressId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model SiteVisitType {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  siteVisit SiteVisit[]
}

model Specialism {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  appealSpecialisms AppealSpecialism[]
}

model AppellantCaseIncompleteReasonText {
  id                                           Int                                          @id @default(autoincrement())
  text                                         String
  appellantCaseIncompleteReasonOnAppellantCase AppellantCaseIncompleteReasonOnAppellantCase @relation(fields: [appellantCaseIncompleteReasonId, appellantCaseId], references: [appellantCaseIncompleteReasonId, appellantCaseId])
  appellantCaseIncompleteReasonId              Int
  appellantCaseId                              Int
}

model AppellantCaseInvalidReasonText {
  id                                        Int                                       @id @default(autoincrement())
  text                                      String
  appellantCaseInvalidReasonOnAppellantCase AppellantCaseInvalidReasonOnAppellantCase @relation(fields: [appellantCaseInvalidReasonId, appellantCaseId], references: [appellantCaseInvalidReasonId, appellantCaseId])
  appellantCaseInvalidReasonId              Int
  appellantCaseId                           Int
}

model LPAQuestionnaireIncompleteReasonText {
  id                                                 Int                                                @id @default(autoincrement())
  text                                               String
  lPAQuestionnaireIncompleteReasonOnLPAQuestionnaire LPAQuestionnaireIncompleteReasonOnLPAQuestionnaire @relation(fields: [lpaQuestionnaireIncompleteReasonId, lpaQuestionnaireId], references: [lpaQuestionnaireIncompleteReasonId, lpaQuestionnaireId])
  lpaQuestionnaireIncompleteReasonId                 Int
  lpaQuestionnaireId                                 Int
}
